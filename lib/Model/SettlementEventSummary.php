<?php
/**
 * SettlementEventSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Transaction API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SettlementEventSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettlementEventSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SettlementEventSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => 'string',
'deposit_id' => 'string',
'total_sales' => 'int',
'total_refunds' => 'int',
'total_fees' => 'int',
'total_settled' => 'int',
'account_last_four' => 'string',
'currency' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => null,
'deposit_id' => null,
'total_sales' => null,
'total_refunds' => null,
'total_fees' => null,
'total_settled' => null,
'account_last_four' => null,
'currency' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
'deposit_id' => 'deposit_id',
'total_sales' => 'total_sales',
'total_refunds' => 'total_refunds',
'total_fees' => 'total_fees',
'total_settled' => 'total_settled',
'account_last_four' => 'account_last_four',
'currency' => 'currency'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
'deposit_id' => 'setDepositId',
'total_sales' => 'setTotalSales',
'total_refunds' => 'setTotalRefunds',
'total_fees' => 'setTotalFees',
'total_settled' => 'setTotalSettled',
'account_last_four' => 'setAccountLastFour',
'currency' => 'setCurrency'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
'deposit_id' => 'getDepositId',
'total_sales' => 'getTotalSales',
'total_refunds' => 'getTotalRefunds',
'total_fees' => 'getTotalFees',
'total_settled' => 'getTotalSettled',
'account_last_four' => 'getAccountLastFour',
'currency' => 'getCurrency'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['deposit_id'] = isset($data['deposit_id']) ? $data['deposit_id'] : null;
        $this->container['total_sales'] = isset($data['total_sales']) ? $data['total_sales'] : null;
        $this->container['total_refunds'] = isset($data['total_refunds']) ? $data['total_refunds'] : null;
        $this->container['total_fees'] = isset($data['total_fees']) ? $data['total_fees'] : null;
        $this->container['total_settled'] = isset($data['total_settled']) ? $data['total_settled'] : null;
        $this->container['account_last_four'] = isset($data['account_last_four']) ? $data['account_last_four'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['deposit_id'] === null) {
            $invalidProperties[] = "'deposit_id' can't be null";
        }
        if ($this->container['total_sales'] === null) {
            $invalidProperties[] = "'total_sales' can't be null";
        }
        if ($this->container['total_refunds'] === null) {
            $invalidProperties[] = "'total_refunds' can't be null";
        }
        if ($this->container['total_fees'] === null) {
            $invalidProperties[] = "'total_fees' can't be null";
        }
        if ($this->container['total_settled'] === null) {
            $invalidProperties[] = "'total_settled' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The date corresponding to the settlement events that are being summarized.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets deposit_id
     *
     * @return string
     */
    public function getDepositId()
    {
        return $this->container['deposit_id'];
    }

    /**
     * Sets deposit_id
     *
     * @param string $deposit_id The ID that a user sees on their bank statement
     *
     * @return $this
     */
    public function setDepositId($deposit_id)
    {
        $this->container['deposit_id'] = $deposit_id;

        return $this;
    }

    /**
     * Gets total_sales
     *
     * @return int
     */
    public function getTotalSales()
    {
        return $this->container['total_sales'];
    }

    /**
     * Sets total_sales
     *
     * @param int $total_sales The sum of the disbursements during a given day (before fees), in cents.
     *
     * @return $this
     */
    public function setTotalSales($total_sales)
    {
        $this->container['total_sales'] = $total_sales;

        return $this;
    }

    /**
     * Gets total_refunds
     *
     * @return int
     */
    public function getTotalRefunds()
    {
        return $this->container['total_refunds'];
    }

    /**
     * Sets total_refunds
     *
     * @param int $total_refunds The sum of the refunds disbursed during a given day (before fees), in cents.
     *
     * @return $this
     */
    public function setTotalRefunds($total_refunds)
    {
        $this->container['total_refunds'] = $total_refunds;

        return $this;
    }

    /**
     * Gets total_fees
     *
     * @return int
     */
    public function getTotalFees()
    {
        return $this->container['total_fees'];
    }

    /**
     * Sets total_fees
     *
     * @param int $total_fees The sum of the fees during a given day, in cents.
     *
     * @return $this
     */
    public function setTotalFees($total_fees)
    {
        $this->container['total_fees'] = $total_fees;

        return $this;
    }

    /**
     * Gets total_settled
     *
     * @return int
     */
    public function getTotalSettled()
    {
        return $this->container['total_settled'];
    }

    /**
     * Sets total_settled
     *
     * @param int $total_settled total_sales - total_fees or total_refunds - total_fees
     *
     * @return $this
     */
    public function setTotalSettled($total_settled)
    {
        $this->container['total_settled'] = $total_settled;

        return $this;
    }

    /**
     * Gets account_last_four
     *
     * @return string
     */
    public function getAccountLastFour()
    {
        return $this->container['account_last_four'];
    }

    /**
     * Sets account_last_four
     *
     * @param string $account_last_four Last four digits of the disbursed to bank account number
     *
     * @return $this
     */
    public function setAccountLastFour($account_last_four)
    {
        $this->container['account_last_four'] = $account_last_four;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency of the deposit associated with the settlement summary
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
