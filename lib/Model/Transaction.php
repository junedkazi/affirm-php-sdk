<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Transaction API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'int',
'amount_refunded' => 'int',
'authorization_expiration' => 'string',
'checkout_id' => 'string',
'created' => 'string',
'currency' => 'string',
'events' => '\Swagger\Client\Model\TransactionEvent[]',
'id' => 'string',
'order_id' => 'string',
'provider_id' => 'int',
'remove_tax' => 'bool',
'status' => 'string',
'token' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => null,
'amount_refunded' => null,
'authorization_expiration' => null,
'checkout_id' => null,
'created' => null,
'currency' => null,
'events' => null,
'id' => null,
'order_id' => null,
'provider_id' => null,
'remove_tax' => null,
'status' => null,
'token' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
'amount_refunded' => 'amount_refunded',
'authorization_expiration' => 'authorization_expiration',
'checkout_id' => 'checkout_id',
'created' => 'created',
'currency' => 'currency',
'events' => 'events',
'id' => 'id',
'order_id' => 'order_id',
'provider_id' => 'provider_id',
'remove_tax' => 'remove_tax',
'status' => 'status',
'token' => 'token'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
'amount_refunded' => 'setAmountRefunded',
'authorization_expiration' => 'setAuthorizationExpiration',
'checkout_id' => 'setCheckoutId',
'created' => 'setCreated',
'currency' => 'setCurrency',
'events' => 'setEvents',
'id' => 'setId',
'order_id' => 'setOrderId',
'provider_id' => 'setProviderId',
'remove_tax' => 'setRemoveTax',
'status' => 'setStatus',
'token' => 'setToken'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
'amount_refunded' => 'getAmountRefunded',
'authorization_expiration' => 'getAuthorizationExpiration',
'checkout_id' => 'getCheckoutId',
'created' => 'getCreated',
'currency' => 'getCurrency',
'events' => 'getEvents',
'id' => 'getId',
'order_id' => 'getOrderId',
'provider_id' => 'getProviderId',
'remove_tax' => 'getRemoveTax',
'status' => 'getStatus',
'token' => 'getToken'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_AUTHORIZED = 'authorized';
const STATUS_AUTH_EXPIRED = 'auth_expired';
const STATUS_CANCELED = 'canceled';
const STATUS_CAPTURED = 'captured';
const STATUS_CONFIRMATION_EXPIRED = 'confirmation_expired';
const STATUS_CONFIRMED = 'confirmed';
const STATUS_CREATED = 'created';
const STATUS_DECLINED = 'declined';
const STATUS_DISPUTED = 'disputed';
const STATUS_DISPUTE_REFUNDED = 'dispute_refunded';
const STATUS_EXPIRED_AUTHORIZATION = 'expired_authorization';
const STATUS_EXPIRED_CONFIRMATION = 'expired_confirmation';
const STATUS_PARTIALLY_REFUNDED = 'partially_refunded';
const STATUS_REFUNDED = 'refunded';
const STATUS_VOIDED = 'voided';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AUTHORIZED,
self::STATUS_AUTH_EXPIRED,
self::STATUS_CANCELED,
self::STATUS_CAPTURED,
self::STATUS_CONFIRMATION_EXPIRED,
self::STATUS_CONFIRMED,
self::STATUS_CREATED,
self::STATUS_DECLINED,
self::STATUS_DISPUTED,
self::STATUS_DISPUTE_REFUNDED,
self::STATUS_EXPIRED_AUTHORIZATION,
self::STATUS_EXPIRED_CONFIRMATION,
self::STATUS_PARTIALLY_REFUNDED,
self::STATUS_REFUNDED,
self::STATUS_VOIDED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_refunded'] = isset($data['amount_refunded']) ? $data['amount_refunded'] : null;
        $this->container['authorization_expiration'] = isset($data['authorization_expiration']) ? $data['authorization_expiration'] : null;
        $this->container['checkout_id'] = isset($data['checkout_id']) ? $data['checkout_id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
        $this->container['remove_tax'] = isset($data['remove_tax']) ? $data['remove_tax'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The original amount financed to the customer in this transaction. The value is non-negative and is represented in the smallest currency unit, such as cents instead of dollars.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_refunded
     *
     * @return int
     */
    public function getAmountRefunded()
    {
        return $this->container['amount_refunded'];
    }

    /**
     * Sets amount_refunded
     *
     * @param int $amount_refunded The amount refunded back to the customer from this transaction. The value may be less than the total amount financed if a partial refund was issued. The value is non-negative and is represented in the smallest currency unit, such as cents instead of dollars.
     *
     * @return $this
     */
    public function setAmountRefunded($amount_refunded)
    {
        $this->container['amount_refunded'] = $amount_refunded;

        return $this;
    }

    /**
     * Gets authorization_expiration
     *
     * @return string
     */
    public function getAuthorizationExpiration()
    {
        return $this->container['authorization_expiration'];
    }

    /**
     * Sets authorization_expiration
     *
     * @param string $authorization_expiration The time when the transaction can no longer be authorized. The value is formatted in RFC 3339.
     *
     * @return $this
     */
    public function setAuthorizationExpiration($authorization_expiration)
    {
        $this->container['authorization_expiration'] = $authorization_expiration;

        return $this;
    }

    /**
     * Gets checkout_id
     *
     * @return string
     */
    public function getCheckoutId()
    {
        return $this->container['checkout_id'];
    }

    /**
     * Sets checkout_id
     *
     * @param string $checkout_id A unique identifier referencing the Checkout object.
     *
     * @return $this
     */
    public function setCheckoutId($checkout_id)
    {
        $this->container['checkout_id'] = $checkout_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created The time when the transaction was created. The value is formatted in RFC 3339.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The local currency of the transaction with its being a valid subset of the ISO 4217 currency code.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Swagger\Client\Model\TransactionEvent[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Swagger\Client\Model\TransactionEvent[] $events An array of TransactionEvent objects.
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique identifier representing the transaction.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Identifies the order within the merchant's order management system that this transaction corresponds to.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return int
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param int $provider_id A unique identifier of the provider that is financing the transaction.
     *
     * @return $this
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets remove_tax
     *
     * @return bool
     */
    public function getRemoveTax()
    {
        return $this->container['remove_tax'];
    }

    /**
     * Sets remove_tax
     *
     * @param bool $remove_tax A bool denoting if tax was paid by the provider (Affirm, LTO). Used by platform integrations to remove tax.
     *
     * @return $this
     */
    public function setRemoveTax($remove_tax)
    {
        $this->container['remove_tax'] = $remove_tax;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the transaction.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token A JWT signing the JSON response; if PII is included in the response this is also encrypted.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
