<?php
/**
 * SettlementEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Transaction API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SettlementEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettlementEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SettlementEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'date' => '\DateTime',
'effective_date' => '\DateTime',
'purchase_id' => 'string',
'order_id' => 'string',
'transaction_event_id' => 'string',
'merchant_id' => 'string',
'event_type' => 'string',
'sales' => 'int',
'refunds' => 'int',
'fees' => 'int',
'transaction_fees' => 'int',
'total_settled' => 'int',
'mdr' => 'float',
'deposit_id' => 'string',
'currency' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'date' => 'date',
'effective_date' => 'date',
'purchase_id' => null,
'order_id' => null,
'transaction_event_id' => null,
'merchant_id' => null,
'event_type' => null,
'sales' => null,
'refunds' => null,
'fees' => null,
'transaction_fees' => null,
'total_settled' => null,
'mdr' => null,
'deposit_id' => null,
'currency' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'date' => 'date',
'effective_date' => 'effective_date',
'purchase_id' => 'purchase_id',
'order_id' => 'order_id',
'transaction_event_id' => 'transaction_event_id',
'merchant_id' => 'merchant_id',
'event_type' => 'event_type',
'sales' => 'sales',
'refunds' => 'refunds',
'fees' => 'fees',
'transaction_fees' => 'transaction_fees',
'total_settled' => 'total_settled',
'mdr' => 'mdr',
'deposit_id' => 'deposit_id',
'currency' => 'currency'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'date' => 'setDate',
'effective_date' => 'setEffectiveDate',
'purchase_id' => 'setPurchaseId',
'order_id' => 'setOrderId',
'transaction_event_id' => 'setTransactionEventId',
'merchant_id' => 'setMerchantId',
'event_type' => 'setEventType',
'sales' => 'setSales',
'refunds' => 'setRefunds',
'fees' => 'setFees',
'transaction_fees' => 'setTransactionFees',
'total_settled' => 'setTotalSettled',
'mdr' => 'setMdr',
'deposit_id' => 'setDepositId',
'currency' => 'setCurrency'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'date' => 'getDate',
'effective_date' => 'getEffectiveDate',
'purchase_id' => 'getPurchaseId',
'order_id' => 'getOrderId',
'transaction_event_id' => 'getTransactionEventId',
'merchant_id' => 'getMerchantId',
'event_type' => 'getEventType',
'sales' => 'getSales',
'refunds' => 'getRefunds',
'fees' => 'getFees',
'transaction_fees' => 'getTransactionFees',
'total_settled' => 'getTotalSettled',
'mdr' => 'getMdr',
'deposit_id' => 'getDepositId',
'currency' => 'getCurrency'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_TYPE_DISPUTE_OPENED = 'dispute_opened';
const EVENT_TYPE_DISPUTE_RESOLVED = 'dispute_resolved';
const EVENT_TYPE_FEE_ADJUSTMENT = 'fee_adjustment';
const EVENT_TYPE_LOAN_CAPTURE = 'loan_capture';
const EVENT_TYPE_LOAN_REFUND = 'loan_refund';
const EVENT_TYPE_MERCHANT_FEE = 'merchant_fee';
const EVENT_TYPE_REFUND_VOIDED = 'refund_voided';
const EVENT_TYPE_SPLIT_CAPTURE = 'split_capture';
const EVENT_TYPE_VCN_BALANCE_ADJUSTMENT = 'vcn_balance_adjustment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_DISPUTE_OPENED,
self::EVENT_TYPE_DISPUTE_RESOLVED,
self::EVENT_TYPE_FEE_ADJUSTMENT,
self::EVENT_TYPE_LOAN_CAPTURE,
self::EVENT_TYPE_LOAN_REFUND,
self::EVENT_TYPE_MERCHANT_FEE,
self::EVENT_TYPE_REFUND_VOIDED,
self::EVENT_TYPE_SPLIT_CAPTURE,
self::EVENT_TYPE_VCN_BALANCE_ADJUSTMENT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['transaction_event_id'] = isset($data['transaction_event_id']) ? $data['transaction_event_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['sales'] = isset($data['sales']) ? $data['sales'] : null;
        $this->container['refunds'] = isset($data['refunds']) ? $data['refunds'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['transaction_fees'] = isset($data['transaction_fees']) ? $data['transaction_fees'] : null;
        $this->container['total_settled'] = isset($data['total_settled']) ? $data['total_settled'] : null;
        $this->container['mdr'] = isset($data['mdr']) ? $data['mdr'] : null;
        $this->container['deposit_id'] = isset($data['deposit_id']) ? $data['deposit_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['effective_date'] === null) {
            $invalidProperties[] = "'effective_date' can't be null";
        }
        if ($this->container['purchase_id'] === null) {
            $invalidProperties[] = "'purchase_id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['event_type'] === null) {
            $invalidProperties[] = "'event_type' can't be null";
        }
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['event_type']) && !in_array($this->container['event_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sales'] === null) {
            $invalidProperties[] = "'sales' can't be null";
        }
        if ($this->container['refunds'] === null) {
            $invalidProperties[] = "'refunds' can't be null";
        }
        if ($this->container['fees'] === null) {
            $invalidProperties[] = "'fees' can't be null";
        }
        if ($this->container['total_settled'] === null) {
            $invalidProperties[] = "'total_settled' can't be null";
        }
        if ($this->container['deposit_id'] === null) {
            $invalidProperties[] = "'deposit_id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique UUID for the settlement event
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The disbursed date, which is the date that the deposit was initiated.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date of the loan event that caused this Settlement.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id The ID of the purchase.
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The Partner Order ID.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets transaction_event_id
     *
     * @return string
     */
    public function getTransactionEventId()
    {
        return $this->container['transaction_event_id'];
    }

    /**
     * Sets transaction_event_id
     *
     * @param string $transaction_event_id The ID of the transaction event that caused the disbursement.
     *
     * @return $this
     */
    public function setTransactionEventId($transaction_event_id)
    {
        $this->container['transaction_event_id'] = $transaction_event_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id The ID of the merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type Type of settlement event.
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!in_array($event_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets sales
     *
     * @return int
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     *
     * @param int $sales The amount of the disbursement (before fees), in cents.
     *
     * @return $this
     */
    public function setSales($sales)
    {
        $this->container['sales'] = $sales;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return int
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param int $refunds The amount of the refund (before fees), in cents.
     *
     * @return $this
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return int
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param int $fees The fee amount (in cents).
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets transaction_fees
     *
     * @return int
     */
    public function getTransactionFees()
    {
        return $this->container['transaction_fees'];
    }

    /**
     * Sets transaction_fees
     *
     * @param int $transaction_fees The transaction fee amount (in cents).
     *
     * @return $this
     */
    public function setTransactionFees($transaction_fees)
    {
        $this->container['transaction_fees'] = $transaction_fees;

        return $this;
    }

    /**
     * Gets total_settled
     *
     * @return int
     */
    public function getTotalSettled()
    {
        return $this->container['total_settled'];
    }

    /**
     * Sets total_settled
     *
     * @param int $total_settled The sale or refund amount net the fees (in cents).
     *
     * @return $this
     */
    public function setTotalSettled($total_settled)
    {
        $this->container['total_settled'] = $total_settled;

        return $this;
    }

    /**
     * Gets mdr
     *
     * @return float
     */
    public function getMdr()
    {
        return $this->container['mdr'];
    }

    /**
     * Sets mdr
     *
     * @param float $mdr Merchant discount rate (merchant fee) associated with the charge.
     *
     * @return $this
     */
    public function setMdr($mdr)
    {
        $this->container['mdr'] = $mdr;

        return $this;
    }

    /**
     * Gets deposit_id
     *
     * @return string
     */
    public function getDepositId()
    {
        return $this->container['deposit_id'];
    }

    /**
     * Sets deposit_id
     *
     * @param string $deposit_id The ACH identifier of the deposit made in the merchants bank account
     *
     * @return $this
     */
    public function setDepositId($deposit_id)
    {
        $this->container['deposit_id'] = $deposit_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the settlement event
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
