<?php
/**
 * TransactionsAPIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Transaction API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TransactionsAPIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorizeTransaction
     *
     * Authorize Transaction
     *
     * @param  \Swagger\Client\Model\AuthorizeRequest $body The request body used to create a transaction. (optional)
     * @param  string $idempotency_key idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Transaction
     */
    public function authorizeTransaction($body = null, $idempotency_key = null)
    {
        list($response) = $this->authorizeTransactionWithHttpInfo($body, $idempotency_key);
        return $response;
    }

    /**
     * Operation authorizeTransactionWithHttpInfo
     *
     * Authorize Transaction
     *
     * @param  \Swagger\Client\Model\AuthorizeRequest $body The request body used to create a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeTransactionWithHttpInfo($body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\Transaction';
        $request = $this->authorizeTransactionRequest($body, $idempotency_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizeTransactionAsync
     *
     * Authorize Transaction
     *
     * @param  \Swagger\Client\Model\AuthorizeRequest $body The request body used to create a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeTransactionAsync($body = null, $idempotency_key = null)
    {
        return $this->authorizeTransactionAsyncWithHttpInfo($body, $idempotency_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeTransactionAsyncWithHttpInfo
     *
     * Authorize Transaction
     *
     * @param  \Swagger\Client\Model\AuthorizeRequest $body The request body used to create a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeTransactionAsyncWithHttpInfo($body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\Transaction';
        $request = $this->authorizeTransactionRequest($body, $idempotency_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorizeTransaction'
     *
     * @param  \Swagger\Client\Model\AuthorizeRequest $body The request body used to create a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizeTransactionRequest($body = null, $idempotency_key = null)
    {

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureTransaction
     *
     * Capture Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\CaptureRequest $body body (optional)
     * @param  string $idempotency_key idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransactionEvent
     */
    public function captureTransaction($id, $body = null, $idempotency_key = null)
    {
        list($response) = $this->captureTransactionWithHttpInfo($id, $body, $idempotency_key);
        return $response;
    }

    /**
     * Operation captureTransactionWithHttpInfo
     *
     * Capture Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\CaptureRequest $body (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransactionEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureTransactionWithHttpInfo($id, $body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->captureTransactionRequest($id, $body, $idempotency_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransactionEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Conflict',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureTransactionAsync
     *
     * Capture Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\CaptureRequest $body (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureTransactionAsync($id, $body = null, $idempotency_key = null)
    {
        return $this->captureTransactionAsyncWithHttpInfo($id, $body, $idempotency_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureTransactionAsyncWithHttpInfo
     *
     * Capture Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\CaptureRequest $body (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureTransactionAsyncWithHttpInfo($id, $body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->captureTransactionRequest($id, $body, $idempotency_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureTransaction'
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\CaptureRequest $body (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function captureTransactionRequest($id, $body = null, $idempotency_key = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling captureTransaction'
            );
        }

        $resourcePath = '/transactions/{id}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSettlementEventSummaries
     *
     * List Settlement Event Summaries
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedSettlementEventSummaryResponse
     */
    public function listSettlementEventSummaries($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        list($response) = $this->listSettlementEventSummariesWithHttpInfo($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering);
        return $response;
    }

    /**
     * Operation listSettlementEventSummariesWithHttpInfo
     *
     * List Settlement Event Summaries
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedSettlementEventSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSettlementEventSummariesWithHttpInfo($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        $returnType = '\Swagger\Client\Model\PaginatedSettlementEventSummaryResponse';
        $request = $this->listSettlementEventSummariesRequest($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedSettlementEventSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UnexpectedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSettlementEventSummariesAsync
     *
     * List Settlement Event Summaries
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSettlementEventSummariesAsync($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        return $this->listSettlementEventSummariesAsyncWithHttpInfo($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSettlementEventSummariesAsyncWithHttpInfo
     *
     * List Settlement Event Summaries
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSettlementEventSummariesAsyncWithHttpInfo($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        $returnType = '\Swagger\Client\Model\PaginatedSettlementEventSummaryResponse';
        $request = $this->listSettlementEventSummariesRequest($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSettlementEventSummaries'
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listSettlementEventSummariesRequest($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling listSettlementEventSummaries'
            );
        }

        $resourcePath = '/settlements/daily';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchant_id !== null) {
            $queryParams['merchant_id'] = ObjectSerializer::toQueryValue($merchant_id, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after, 'date');
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before, 'date');
        }
        // query params
        if ($from_cursor_uuid !== null) {
            $queryParams['from_cursor_uuid'] = ObjectSerializer::toQueryValue($from_cursor_uuid, 'uuid');
        }
        // query params
        if ($from_cursor_date !== null) {
            $queryParams['from_cursor_date'] = ObjectSerializer::toQueryValue($from_cursor_date, 'date');
        }
        // query params
        if ($to_cursor_uuid !== null) {
            $queryParams['to_cursor_uuid'] = ObjectSerializer::toQueryValue($to_cursor_uuid, 'uuid');
        }
        // query params
        if ($to_cursor_date !== null) {
            $queryParams['to_cursor_date'] = ObjectSerializer::toQueryValue($to_cursor_date, 'date');
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSettlementEvents
     *
     * List Settlement Events
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedSettlementEventResponse
     */
    public function listSettlementEvents($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        list($response) = $this->listSettlementEventsWithHttpInfo($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering);
        return $response;
    }

    /**
     * Operation listSettlementEventsWithHttpInfo
     *
     * List Settlement Events
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedSettlementEventResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSettlementEventsWithHttpInfo($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        $returnType = '\Swagger\Client\Model\PaginatedSettlementEventResponse';
        $request = $this->listSettlementEventsRequest($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedSettlementEventResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UnexpectedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSettlementEventsAsync
     *
     * List Settlement Events
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSettlementEventsAsync($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        return $this->listSettlementEventsAsyncWithHttpInfo($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSettlementEventsAsyncWithHttpInfo
     *
     * List Settlement Events
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSettlementEventsAsyncWithHttpInfo($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        $returnType = '\Swagger\Client\Model\PaginatedSettlementEventResponse';
        $request = $this->listSettlementEventsRequest($merchant_id, $limit, $after, $before, $from_cursor_uuid, $from_cursor_date, $to_cursor_uuid, $to_cursor_date, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSettlementEvents'
     *
     * @param  string $merchant_id The Affirm Merchant ID (required)
     * @param  int $limit The maximum number of results per page. Default is 5. (optional)
     * @param  \DateTime $after The beginning of the date range (inclusive) (optional)
     * @param  \DateTime $before The end of the date range (inclusive) (optional)
     * @param  string $from_cursor_uuid Optional paging cursor uuid after which results should be returned. This uuid, along with from_cursor_date is returned in the prev_page field in the 200 response (optional)
     * @param  \DateTime $from_cursor_date Optional paging cursor date after which results should be returned. This date, along with from_cursor_uuid is returned in the prev_page field in the 200 response (optional)
     * @param  string $to_cursor_uuid Optional paging cursor uuid before which results should be returned. This uuid, along with to_cursor_date is returned in the next_page field in the 200 response (optional)
     * @param  \DateTime $to_cursor_date Optional paging cursor date before which results should be returned. This date, along with to_cursor_uuid is returned in the next_page field in the 200 response (optional)
     * @param  string $ordering Optional parameter to define ordering of results. Default is descending chronological order (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listSettlementEventsRequest($merchant_id, $limit = null, $after = null, $before = null, $from_cursor_uuid = null, $from_cursor_date = null, $to_cursor_uuid = null, $to_cursor_date = null, $ordering = null)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling listSettlementEvents'
            );
        }

        $resourcePath = '/settlements/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchant_id !== null) {
            $queryParams['merchant_id'] = ObjectSerializer::toQueryValue($merchant_id, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after, 'date');
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before, 'date');
        }
        // query params
        if ($from_cursor_uuid !== null) {
            $queryParams['from_cursor_uuid'] = ObjectSerializer::toQueryValue($from_cursor_uuid, 'uuid');
        }
        // query params
        if ($from_cursor_date !== null) {
            $queryParams['from_cursor_date'] = ObjectSerializer::toQueryValue($from_cursor_date, 'date');
        }
        // query params
        if ($to_cursor_uuid !== null) {
            $queryParams['to_cursor_uuid'] = ObjectSerializer::toQueryValue($to_cursor_uuid, 'uuid');
        }
        // query params
        if ($to_cursor_date !== null) {
            $queryParams['to_cursor_date'] = ObjectSerializer::toQueryValue($to_cursor_date, 'date');
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransactionEvents
     *
     * List Transaction Events
     *
     * @param  string $transaction_type Type of transaction to be listed, list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  string $transaction_event_type Type of transaction events to be listed, list one of &#x60;authorize&#x60;, &#x60;capture&#x60;, &#x60;refund&#x60;, &#x60;void&#x60;, or &#x60;all&#x60;. (required)
     * @param  string $limit Max number of transaction events to list per page. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_ari Optional end event ARI of query, used during pagination. (optional)
     * @param  string $after_ari Optional start event ARI of query, used during pagination. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListTransactionEvents
     */
    public function listTransactionEvents($transaction_type, $transaction_event_type, $limit = null, $before_date = null, $after_date = null, $before_ari = null, $after_ari = null)
    {
        list($response) = $this->listTransactionEventsWithHttpInfo($transaction_type, $transaction_event_type, $limit, $before_date, $after_date, $before_ari, $after_ari);
        return $response;
    }

    /**
     * Operation listTransactionEventsWithHttpInfo
     *
     * List Transaction Events
     *
     * @param  string $transaction_type Type of transaction to be listed, list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  string $transaction_event_type Type of transaction events to be listed, list one of &#x60;authorize&#x60;, &#x60;capture&#x60;, &#x60;refund&#x60;, &#x60;void&#x60;, or &#x60;all&#x60;. (required)
     * @param  string $limit Max number of transaction events to list per page. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_ari Optional end event ARI of query, used during pagination. (optional)
     * @param  string $after_ari Optional start event ARI of query, used during pagination. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListTransactionEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransactionEventsWithHttpInfo($transaction_type, $transaction_event_type, $limit = null, $before_date = null, $after_date = null, $before_ari = null, $after_ari = null)
    {
        $returnType = '\Swagger\Client\Model\ListTransactionEvents';
        $request = $this->listTransactionEventsRequest($transaction_type, $transaction_event_type, $limit, $before_date, $after_date, $before_ari, $after_ari);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListTransactionEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransactionEventsAsync
     *
     * List Transaction Events
     *
     * @param  string $transaction_type Type of transaction to be listed, list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  string $transaction_event_type Type of transaction events to be listed, list one of &#x60;authorize&#x60;, &#x60;capture&#x60;, &#x60;refund&#x60;, &#x60;void&#x60;, or &#x60;all&#x60;. (required)
     * @param  string $limit Max number of transaction events to list per page. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_ari Optional end event ARI of query, used during pagination. (optional)
     * @param  string $after_ari Optional start event ARI of query, used during pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionEventsAsync($transaction_type, $transaction_event_type, $limit = null, $before_date = null, $after_date = null, $before_ari = null, $after_ari = null)
    {
        return $this->listTransactionEventsAsyncWithHttpInfo($transaction_type, $transaction_event_type, $limit, $before_date, $after_date, $before_ari, $after_ari)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransactionEventsAsyncWithHttpInfo
     *
     * List Transaction Events
     *
     * @param  string $transaction_type Type of transaction to be listed, list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  string $transaction_event_type Type of transaction events to be listed, list one of &#x60;authorize&#x60;, &#x60;capture&#x60;, &#x60;refund&#x60;, &#x60;void&#x60;, or &#x60;all&#x60;. (required)
     * @param  string $limit Max number of transaction events to list per page. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_ari Optional end event ARI of query, used during pagination. (optional)
     * @param  string $after_ari Optional start event ARI of query, used during pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionEventsAsyncWithHttpInfo($transaction_type, $transaction_event_type, $limit = null, $before_date = null, $after_date = null, $before_ari = null, $after_ari = null)
    {
        $returnType = '\Swagger\Client\Model\ListTransactionEvents';
        $request = $this->listTransactionEventsRequest($transaction_type, $transaction_event_type, $limit, $before_date, $after_date, $before_ari, $after_ari);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransactionEvents'
     *
     * @param  string $transaction_type Type of transaction to be listed, list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  string $transaction_event_type Type of transaction events to be listed, list one of &#x60;authorize&#x60;, &#x60;capture&#x60;, &#x60;refund&#x60;, &#x60;void&#x60;, or &#x60;all&#x60;. (required)
     * @param  string $limit Max number of transaction events to list per page. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_ari Optional end event ARI of query, used during pagination. (optional)
     * @param  string $after_ari Optional start event ARI of query, used during pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransactionEventsRequest($transaction_type, $transaction_event_type, $limit = null, $before_date = null, $after_date = null, $before_ari = null, $after_ari = null)
    {
        // verify the required parameter 'transaction_type' is set
        if ($transaction_type === null || (is_array($transaction_type) && count($transaction_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_type when calling listTransactionEvents'
            );
        }
        // verify the required parameter 'transaction_event_type' is set
        if ($transaction_event_type === null || (is_array($transaction_event_type) && count($transaction_event_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_event_type when calling listTransactionEvents'
            );
        }

        $resourcePath = '/transactions/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_type !== null) {
            $queryParams['transaction_type'] = ObjectSerializer::toQueryValue($transaction_type, null);
        }
        // query params
        if ($transaction_event_type !== null) {
            $queryParams['transaction_event_type'] = ObjectSerializer::toQueryValue($transaction_event_type, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($before_date !== null) {
            $queryParams['before_date'] = ObjectSerializer::toQueryValue($before_date, null);
        }
        // query params
        if ($after_date !== null) {
            $queryParams['after_date'] = ObjectSerializer::toQueryValue($after_date, null);
        }
        // query params
        if ($before_ari !== null) {
            $queryParams['before_ari'] = ObjectSerializer::toQueryValue($before_ari, null);
        }
        // query params
        if ($after_ari !== null) {
            $queryParams['after_ari'] = ObjectSerializer::toQueryValue($after_ari, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransactions
     *
     * List Transactions
     *
     * @param  string $transaction_type Type of transaction to be listed, default lists all, otherwise list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  bool $allow_marqeta_view If we want to allow marqeta view, only relevant for charges. (optional)
     * @param  string $before End ARI to query on. (optional)
     * @param  string $after Start ARI to query on. (optional)
     * @param  string $limit Max number of transactions to list. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_timestamp Unix timestamp representing the end time of the query. (optional)
     * @param  string $after_timestamp Unix timestamp representing the start time of the query. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListTransactions
     */
    public function listTransactions($transaction_type, $allow_marqeta_view = null, $before = null, $after = null, $limit = null, $before_date = null, $after_date = null, $before_timestamp = null, $after_timestamp = null)
    {
        list($response) = $this->listTransactionsWithHttpInfo($transaction_type, $allow_marqeta_view, $before, $after, $limit, $before_date, $after_date, $before_timestamp, $after_timestamp);
        return $response;
    }

    /**
     * Operation listTransactionsWithHttpInfo
     *
     * List Transactions
     *
     * @param  string $transaction_type Type of transaction to be listed, default lists all, otherwise list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  bool $allow_marqeta_view If we want to allow marqeta view, only relevant for charges. (optional)
     * @param  string $before End ARI to query on. (optional)
     * @param  string $after Start ARI to query on. (optional)
     * @param  string $limit Max number of transactions to list. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_timestamp Unix timestamp representing the end time of the query. (optional)
     * @param  string $after_timestamp Unix timestamp representing the start time of the query. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListTransactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransactionsWithHttpInfo($transaction_type, $allow_marqeta_view = null, $before = null, $after = null, $limit = null, $before_date = null, $after_date = null, $before_timestamp = null, $after_timestamp = null)
    {
        $returnType = '\Swagger\Client\Model\ListTransactions';
        $request = $this->listTransactionsRequest($transaction_type, $allow_marqeta_view, $before, $after, $limit, $before_date, $after_date, $before_timestamp, $after_timestamp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListTransactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransactionsAsync
     *
     * List Transactions
     *
     * @param  string $transaction_type Type of transaction to be listed, default lists all, otherwise list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  bool $allow_marqeta_view If we want to allow marqeta view, only relevant for charges. (optional)
     * @param  string $before End ARI to query on. (optional)
     * @param  string $after Start ARI to query on. (optional)
     * @param  string $limit Max number of transactions to list. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_timestamp Unix timestamp representing the end time of the query. (optional)
     * @param  string $after_timestamp Unix timestamp representing the start time of the query. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsAsync($transaction_type, $allow_marqeta_view = null, $before = null, $after = null, $limit = null, $before_date = null, $after_date = null, $before_timestamp = null, $after_timestamp = null)
    {
        return $this->listTransactionsAsyncWithHttpInfo($transaction_type, $allow_marqeta_view, $before, $after, $limit, $before_date, $after_date, $before_timestamp, $after_timestamp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransactionsAsyncWithHttpInfo
     *
     * List Transactions
     *
     * @param  string $transaction_type Type of transaction to be listed, default lists all, otherwise list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  bool $allow_marqeta_view If we want to allow marqeta view, only relevant for charges. (optional)
     * @param  string $before End ARI to query on. (optional)
     * @param  string $after Start ARI to query on. (optional)
     * @param  string $limit Max number of transactions to list. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_timestamp Unix timestamp representing the end time of the query. (optional)
     * @param  string $after_timestamp Unix timestamp representing the start time of the query. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsAsyncWithHttpInfo($transaction_type, $allow_marqeta_view = null, $before = null, $after = null, $limit = null, $before_date = null, $after_date = null, $before_timestamp = null, $after_timestamp = null)
    {
        $returnType = '\Swagger\Client\Model\ListTransactions';
        $request = $this->listTransactionsRequest($transaction_type, $allow_marqeta_view, $before, $after, $limit, $before_date, $after_date, $before_timestamp, $after_timestamp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransactions'
     *
     * @param  string $transaction_type Type of transaction to be listed, default lists all, otherwise list one of &#x60;charge&#x60; or &#x60;lease&#x60;. (required)
     * @param  bool $allow_marqeta_view If we want to allow marqeta view, only relevant for charges. (optional)
     * @param  string $before End ARI to query on. (optional)
     * @param  string $after Start ARI to query on. (optional)
     * @param  string $limit Max number of transactions to list. (optional)
     * @param  string $before_date End date of query. (optional)
     * @param  string $after_date Start date of query. (optional)
     * @param  string $before_timestamp Unix timestamp representing the end time of the query. (optional)
     * @param  string $after_timestamp Unix timestamp representing the start time of the query. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransactionsRequest($transaction_type, $allow_marqeta_view = null, $before = null, $after = null, $limit = null, $before_date = null, $after_date = null, $before_timestamp = null, $after_timestamp = null)
    {
        // verify the required parameter 'transaction_type' is set
        if ($transaction_type === null || (is_array($transaction_type) && count($transaction_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_type when calling listTransactions'
            );
        }

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_type !== null) {
            $queryParams['transaction_type'] = ObjectSerializer::toQueryValue($transaction_type, null);
        }
        // query params
        if ($allow_marqeta_view !== null) {
            $queryParams['allow_marqeta_view'] = ObjectSerializer::toQueryValue($allow_marqeta_view, null);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before, null);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($before_date !== null) {
            $queryParams['before_date'] = ObjectSerializer::toQueryValue($before_date, null);
        }
        // query params
        if ($after_date !== null) {
            $queryParams['after_date'] = ObjectSerializer::toQueryValue($after_date, null);
        }
        // query params
        if ($before_timestamp !== null) {
            $queryParams['before_timestamp'] = ObjectSerializer::toQueryValue($before_timestamp, null);
        }
        // query params
        if ($after_timestamp !== null) {
            $queryParams['after_timestamp'] = ObjectSerializer::toQueryValue($after_timestamp, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readTransaction
     *
     * Read Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  string $expand A comma-separated set of related objects to expand in the response. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Transaction
     */
    public function readTransaction($id, $expand = null)
    {
        list($response) = $this->readTransactionWithHttpInfo($id, $expand);
        return $response;
    }

    /**
     * Operation readTransactionWithHttpInfo
     *
     * Read Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  string $expand A comma-separated set of related objects to expand in the response. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function readTransactionWithHttpInfo($id, $expand = null)
    {
        $returnType = '\Swagger\Client\Model\Transaction';
        $request = $this->readTransactionRequest($id, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readTransactionAsync
     *
     * Read Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  string $expand A comma-separated set of related objects to expand in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readTransactionAsync($id, $expand = null)
    {
        return $this->readTransactionAsyncWithHttpInfo($id, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readTransactionAsyncWithHttpInfo
     *
     * Read Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  string $expand A comma-separated set of related objects to expand in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readTransactionAsyncWithHttpInfo($id, $expand = null)
    {
        $returnType = '\Swagger\Client\Model\Transaction';
        $request = $this->readTransactionRequest($id, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readTransaction'
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  string $expand A comma-separated set of related objects to expand in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readTransactionRequest($id, $expand = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling readTransaction'
            );
        }

        $resourcePath = '/transactions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundTransaction
     *
     * Refund Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\RefundRequest $body The request body used to refund a transaction. (optional)
     * @param  string $idempotency_key idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransactionEvent
     */
    public function refundTransaction($id, $body = null, $idempotency_key = null)
    {
        list($response) = $this->refundTransactionWithHttpInfo($id, $body, $idempotency_key);
        return $response;
    }

    /**
     * Operation refundTransactionWithHttpInfo
     *
     * Refund Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\RefundRequest $body The request body used to refund a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransactionEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundTransactionWithHttpInfo($id, $body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->refundTransactionRequest($id, $body, $idempotency_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransactionEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundTransactionAsync
     *
     * Refund Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\RefundRequest $body The request body used to refund a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundTransactionAsync($id, $body = null, $idempotency_key = null)
    {
        return $this->refundTransactionAsyncWithHttpInfo($id, $body, $idempotency_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundTransactionAsyncWithHttpInfo
     *
     * Refund Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\RefundRequest $body The request body used to refund a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundTransactionAsyncWithHttpInfo($id, $body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->refundTransactionRequest($id, $body, $idempotency_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundTransaction'
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\RefundRequest $body The request body used to refund a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundTransactionRequest($id, $body = null, $idempotency_key = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling refundTransaction'
            );
        }

        $resourcePath = '/transactions/{id}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransaction
     *
     * Update Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\UpdateRequest $body The request body used to update a transaction. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransactionEvent
     */
    public function updateTransaction($id, $body = null)
    {
        list($response) = $this->updateTransactionWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateTransactionWithHttpInfo
     *
     * Update Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\UpdateRequest $body The request body used to update a transaction. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransactionEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionWithHttpInfo($id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->updateTransactionRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransactionEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTransactionAsync
     *
     * Update Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\UpdateRequest $body The request body used to update a transaction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionAsync($id, $body = null)
    {
        return $this->updateTransactionAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionAsyncWithHttpInfo
     *
     * Update Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\UpdateRequest $body The request body used to update a transaction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->updateTransactionRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransaction'
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\UpdateRequest $body The request body used to update a transaction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTransactionRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateTransaction'
            );
        }

        $resourcePath = '/transactions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidTransaction
     *
     * Void Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\VoidRequest $body The request body used to void a transaction. (optional)
     * @param  string $idempotency_key idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransactionEvent
     */
    public function voidTransaction($id, $body = null, $idempotency_key = null)
    {
        list($response) = $this->voidTransactionWithHttpInfo($id, $body, $idempotency_key);
        return $response;
    }

    /**
     * Operation voidTransactionWithHttpInfo
     *
     * Void Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\VoidRequest $body The request body used to void a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransactionEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidTransactionWithHttpInfo($id, $body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->voidTransactionRequest($id, $body, $idempotency_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransactionEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Conflict',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidTransactionAsync
     *
     * Void Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\VoidRequest $body The request body used to void a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidTransactionAsync($id, $body = null, $idempotency_key = null)
    {
        return $this->voidTransactionAsyncWithHttpInfo($id, $body, $idempotency_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidTransactionAsyncWithHttpInfo
     *
     * Void Transaction
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\VoidRequest $body The request body used to void a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidTransactionAsyncWithHttpInfo($id, $body = null, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\TransactionEvent';
        $request = $this->voidTransactionRequest($id, $body, $idempotency_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidTransaction'
     *
     * @param  string $id The unique identifier of the transaction. (required)
     * @param  \Swagger\Client\Model\VoidRequest $body The request body used to void a transaction. (optional)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidTransactionRequest($id, $body = null, $idempotency_key = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling voidTransaction'
            );
        }

        $resourcePath = '/transactions/{id}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
